import { forwardRef, Inject, Injectable, OnModuleInit } from '@nestjs/common';
import { Message } from 'node-telegram-bot-api';
import TelegramBot from 'node-telegram-bot-api';
import { VideoService } from './video.service';
import { UserService } from './user.service';
import * as dotenv from 'dotenv';

dotenv.config();

@Injectable()
export class BotService implements OnModuleInit {
  private static botInstance: TelegramBot | null = null;
  private bot!: TelegramBot;

  constructor(
    @Inject(forwardRef(() => VideoService))
    private readonly videoService: VideoService,

    @Inject(forwardRef(() => UserService))
    private readonly userService: UserService,
  ) {}

  onModuleInit() {
    if (BotService.botInstance) {
      console.warn('‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â—ë–Ω.');
      return;
    }

    const TOKEN = process.env.BOT_TOKEN;
    if (!TOKEN) {
      throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!');
    }

    this.bot = new TelegramBot(TOKEN, { polling: true });
    BotService.botInstance = this.bot;

    console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    this.handleEvents();
  }

  private handleEvents() {
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      this.bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! üëã\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ ‚Äî —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é.`);
    });

    this.bot.on('video', async (msg: Message) => {
      const chatId = msg.chat.id;
      const userId = String(msg.from?.id);
      const video = msg.video;

      if (!video?.file_id) return;

      console.log(`–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      try {
        const result = await this.videoService.handleVideo(userId, video);

        if (result === 'LIMIT_EXCEEDED') {
          this.bot.sendMessage(chatId, '–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (5 –≤–∏–¥–µ–æ) –∏—Å—á–µ—Ä–ø–∞–Ω. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.');
        } else if (result === 'ERROR') {
          this.bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ.');
        }
      } catch (error) {
        console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:', error);
        this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
      }
    });
  }

  getBot(): TelegramBot {
    return this.bot;
  }
}
